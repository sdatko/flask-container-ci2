[tox]
minversion = 1.6
skipsdist = True
envlist = unit,pep8,bashate,coverage,functional

[testenv]
basepython = python3
usedevelop = False
install_command = pip install {opts} {packages}

[testenv:app]
deps = -r requirements.txt
setenv = FLASK_APP=app/main.py
commands = flask run

[testenv:unit]
deps = -r requirements.txt
       -r test-requirements.txt
commands = python3 tests-unit.py

[testenv:pep8]
deps = -r requirements.txt
       -r test-requirements.txt
commands = flake8

[testenv:bashate]
deps = -r test-requirements.txt
whitelist_externals = sh
commands = sh -c 'find . \
                      -not \( -type d -name .?\* -prune \) \
                      -type f -iname \*.sh -print0 \
                      | xargs -0 bashate -v -i E020'

[testenv:coverage]
deps = -r requirements.txt
       -r test-requirements.txt
commands =
  coverage run tests-unit.py
  coverage report

[testenv:functional]
whitelist_externals = bash
deps = -r requirements.txt
       -r test-requirements.txt
setenv = FLASK_APP=app/main.py
commands = bash tests-functional.sh

[testenv:hadolint]
whitelist_externals = sh
commands = sh -c 'docker run --rm -i hadolint/hadolint < Dockerfile'

[testenv:build]
whitelist_externals = docker
commands = docker build -t app:latest .

[testenv:container]
whitelist_externals = docker
commands = docker run --rm -p 5000:5000 app

[flake8]
exclude = .git,.tox

[coverage:run]
branch = True
source = app

[coverage:report]
exclude_lines =
    if __name__ == .__main__.:
fail_under = 80
ignore_errors = True
precision = 2
show_missing = True
skip_covered = True
